/*
 * This file is generated by jOOQ.
 */
package com.example.be.db.generated.tables


import com.example.be.db.generated.Public
import com.example.be.db.generated.keys.ARTIST_PKEY
import com.example.be.db.generated.tables.records.ArtistRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime
import javax.annotation.processing.Generated


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.16.5"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Artist(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ArtistRecord>?,
    aliased: Table<ArtistRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ArtistRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.artist</code>
         */
        val ARTIST: Artist = Artist()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ArtistRecord> = ArtistRecord::class.java

    /**
     * The column <code>public.artist.id</code>.
     */
    val ID: TableField<ArtistRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.artist.created</code>.
     */
    val CREATED: TableField<ArtistRecord, LocalDateTime?> = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.artist.updated</code>.
     */
    val UPDATED: TableField<ArtistRecord, LocalDateTime?> = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.artist.name</code>.
     */
    val NAME: TableField<ArtistRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>public.artist.albums</code>.
     */
    val ALBUMS: TableField<ArtistRecord, JSONB?> = createField(DSL.name("albums"), SQLDataType.JSONB, this, "")

    private constructor(alias: Name, aliased: Table<ArtistRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ArtistRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.artist</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.artist</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.artist</code> table reference
     */
    constructor(): this(DSL.name("artist"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ArtistRecord>): this(Internal.createPathAlias(child, key), child, key, ARTIST, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<ArtistRecord, Long?> = super.getIdentity() as Identity<ArtistRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<ArtistRecord> = ARTIST_PKEY
    override fun `as`(alias: String): Artist = Artist(DSL.name(alias), this)
    override fun `as`(alias: Name): Artist = Artist(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Artist = Artist(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Artist = Artist(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Long?, LocalDateTime?, LocalDateTime?, String?, JSONB?> = super.fieldsRow() as Row5<Long?, LocalDateTime?, LocalDateTime?, String?, JSONB?>
}
