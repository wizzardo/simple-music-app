import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

buildscript {
    ext.jooqVersion = "3.16.5"
    ext.postgresqlVersion = "42.3.3"

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jooq:jooq-meta:$jooqVersion"
        classpath "org.jooq:jooq-codegen:$jooqVersion"
        classpath "org.postgresql:postgresql:$postgresqlVersion"
    }
}

plugins {
    id "org.springframework.boot" version "2.6.6"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "org.jetbrains.kotlin.plugin.spring" version "1.6.10"
}

group = "com.example"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation('org.springframework.boot:spring-boot-starter-web') { exclude module: "spring-boot-starter-tomcat" }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "org.flywaydb:flyway-core:8.5.6"
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.wizzardo.tools:tools:0.24-SNAPSHOT'
    implementation "org.postgresql:postgresql:$postgresqlVersion"

    implementation "org.jooq:jooq:$jooqVersion"
    implementation "org.jooq:jooq-meta:$jooqVersion"
    implementation "org.jooq:jooq-codegen:$jooqVersion"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

task jooqGenerate() {
    doLast {
        def configuration = new org.jooq.meta.jaxb.Configuration()
        configuration.with {
            jdbc = new Jdbc().with {
                driver = 'org.postgresql.Driver'
                url = 'jdbc:postgresql://localhost:5432/postgres'
                user = 'postgres'
                password = 'Pass2020!'
                it
            }

            generator = new Generator().with {
                name = 'org.jooq.codegen.KotlinGenerator'

                database = new Database().with {
                    name = 'org.jooq.meta.postgres.PostgresDatabase'
                    inputSchema = 'public'
                    syntheticIdentities = 'id'
                    includes = '.*'
                    excludes = ''
                    it
                }

                generate = new Generate().with {
                    javaTimeTypes = true
                    pojos = true
                    daos = true
                    generatedAnnotation = true
                    serializablePojos = false
                    it
                }

                target = new Target().with {
                    packageName = 'com.example.be.db.generated'
                    directory = projectDir.absolutePath + '/src/main/kotlin'
                    it
                }
                it
            }
        }

        GenerationTool.generate(configuration)
    }
}
